자바 - 객체 지향 프로그래밍 언어 : OOP
현실 정보(객체) -> 추상화 과정 -> 클래스를 정의
정의된 클래스를 이용하여 코드를 작성
-추상화
-캡슐화
-상속

클래스
 - 메서드 : 기능
 - 멤버변수 : 정보
 - 생성자 : 정보를 초기화

접근제어자 class 클래스명 {
    //멤버변수
    접근제어자 자료형 변수명;
    //메서드
    접근제어자 리턴타입 메서드명(매개변수){
	//구현;
    }
    //생성자
    public 클래스명(매개변수){
        //초기화;
    }
}

멤버변수
- 자동으로 각 자료형에 맞는 기본값으로 초기화
- 같은 클래스안에서 자유롭게 사용할 수 있다(단, 특수 상황)
- 다른 클래스에서는 인스턴스를 생성해서 호출(단, 접근제어자에 따라 달라질수 있음)

메서드
- 기능
- 매개변수 : 메서드를 실행하기 위해 필요한 정보를
- 리턴타입 : 메서드 실행 후 돌려줘야 하는 값들의 타입
- 메서드명 : 카멜표기법. student + count => studentCount

메서드 장점
- 구조를 파악하기 쉬워짐
- 잘 만든 메서드는 재사용을 통해 코드의 중복을 제거

메서드 오버로딩
- 이름이 같은 메서드가 2개 이상인 경우
- 조건 : 매개변수가 다른 경우
    1.매개변수의 개수가 다른 경우
    2.매개변수의 타입이 다른 경우




생성자
- 이름이 클래스명이다
- 메서드는 원하는 시점에서 호출가능. 
    생성자는 new를 통해 객체를 생성할 때만 호출할 수 있다.
- 클래스에 생성자가 1개도 없으면 기본 생성자가 자동으로 추가
- 멤버변수를 초기화

접근제어자
1. private : 해당 클래스
2. default : 생략 - 해당 클래스 + 같은 패키지
3. protected : 상속 - 해당 클래스 + 같은 패키지 + 자식 클래스
4. public : 해당 클래스 + 같은 패키지 + 다른 패키지 => 모두

멤버변수 : 
- 대부분 private
- 고정 상수 public

메서드 : 
- 대부분 public 
- 같은 클래스에서 다른 메서드에서만 사용되고, 
    밖에서는 사용될 필요가 없는 메서드 private

생성자 : 
- 대부분 public
- 싱글톤 private